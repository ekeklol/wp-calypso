/**
 * External dependencies
 */
import { connect } from 'react-redux';
import React, { Component, PropTypes } from 'react';

/**
 * Internal dependencies
 */
import Card from 'components/card';
import { localize } from 'i18n-calypso';
import {
	getTwoFactorUserId,
	getTwoFactorAuthNonce,
	getTwoFactorSupportedAuthTypes,
} from 'state/login/selectors';
import { sendSmsCode } from 'state/login/actions';

class WaitingTwoFactorNotificationApproval extends Component {
	static propTypes = {
		supportedAuthTypes: PropTypes.array.isRequired,
		translate: PropTypes.func.isRequired,
	};

	sendSmsCode = ( event ) => {
		event.preventDefault();

		const { userId, twoStepNonce } = this.props;

		this.props.sendSmsCode( userId, twoStepNonce );
	};

	render() {
		const { supportedAuthTypes, translate } = this.props;

		return (
			<form>
				<Card className="two-factor-authentication__push-notification-screen is-compact">
					<p>
						{ translate( 'We just sent a push notification to your WordPress mobile app. ' +
							'Swipe or tap to open and verify your login.' ) }
					</p>
					<div>
						<img className="two-factor-authentication__auth-code-preview" src="/calypso/images/login/pushauth.svg" />
					</div>
					<p>
						{ translate( 'Or, type in the verification code generated by your Authenticator app' +
							' or sent via text.' ) }
					</p>
				</Card>
				<Card className="two-factor-authentication__form-action is-compact">
					<p>
						{ translate( 'Or, continue to your account using:' ) }
					</p>
					{ supportedAuthTypes.indexOf( 'sms' ) > -1 && (
						<p>
							<a href="#" onClick={ this.sendSmsCode }>{ translate( 'A recovery code via text' ) }</a>
						</p>
					) }
					<p>
						<a href="#">{ translate( 'An Authenticator application' ) }</a>
					</p>
				</Card>
			</form>
		);
	}
}

export default connect(
	( state ) => ( {
		userId: getTwoFactorUserId( state ),
		twoStepNonce: getTwoFactorAuthNonce( state ),
		supportedAuthTypes: getTwoFactorSupportedAuthTypes( state ),
	} ),
	{
		sendSmsCode,
	}
)( localize( WaitingTwoFactorNotificationApproval ) );
