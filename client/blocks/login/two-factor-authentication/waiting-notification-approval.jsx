/**
 * External dependencies
 */
import React from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';

/**
 * Internal dependencies
 */
import Card from 'components/card';
import { localize } from 'i18n-calypso';
import {
	startPollAppPushAuth,
	stopPollAppPushAuth,
} from 'state/login/actions';
import {
	getTwoFactorPushPollInProgress,
	getTwoFactorPushPollSuccess,
} from 'state/login/selectors';

class WaitingTwoFactorNotificationApproval extends React.Component {
	componentDidMount() {
		this.props.startPollAppPushAuth();
	}
	componentWillUnmount() {
		this.props.stopPollAppPushAuth();
	}

	render() {
		const {
			translate,
			pushSuccess,
			pollInProgress,
		} = this.props;

		if ( pushSuccess ) {
			return <h1>Success!</h1>;
		}

		return <form>
			<Card className="two-factor-authentication__push-notification-screen is-compact">
				<p>inProgress: { pollInProgress ? 'true' : 'false' }</p>
				<p>
					{ translate( 'We just sent a push notification to your WordPress mobile app. ' +
						'Swipe or tap to open and verify your login.' ) }
				</p>
				<div>
					<img className="two-factor-authentication__auth-code-preview" src="/calypso/images/login/pushauth.svg" />
				</div>
				<p>
					{ translate( 'Or, type in the verification code generated by your Authenticator app' +
						' or sent via text.' ) }
				</p>
			</Card>
			<Card className="two-factor-authentication__form-action is-compact">
				<p>
					{ translate( 'Or, continue to your account using:' ) }
				</p>
				<p>
					<a href="#">{ translate( 'A recovery code via text' ) }</a>
				</p>
				<p>
					<a href="#">{ translate( 'An Authenticator application' ) }</a>
				</p>
			</Card>
		</form>;
	}
}

export default connect(
	state => ( {
		pushSuccess: getTwoFactorPushPollSuccess( state ),
		pollInProgress: getTwoFactorPushPollInProgress( state )
	} ),
	dispatch => bindActionCreators( {
		startPollAppPushAuth,
		stopPollAppPushAuth,
	}, dispatch )
)( localize( WaitingTwoFactorNotificationApproval ) );
